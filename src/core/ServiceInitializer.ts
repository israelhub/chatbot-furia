// filepath: c:\Users\Pc\Desktop\furia-bot\src\services\ServiceInitializer.ts
/**
 * Inicializador de servi√ßos do FuriaBot
 * Garante a inicializa√ß√£o na ordem correta para evitar depend√™ncias circulares
 * Implementa o padr√£o de design Factory Method para inicializa√ß√£o de servi√ßos
 */
import { CacheService } from './CacheService.js';
import { aiService } from './AIService.js';
import { botCore } from './BotCore.js';
import { DataService } from './data/DataService.ts';
import { CONFIG } from '../config/config.js';
import { AIProvider, AIServiceConfig } from '../types/index.js';

// ======================================================================
// FACTORY DE INICIALIZA√á√ÉO DE SERVI√áOS
// Adicione novos servi√ßos aqui quando necess√°rio
// ======================================================================

/**
 * Classe Factory para inicializa√ß√£o de servi√ßos
 * Implementa o padr√£o Singleton para garantir inicializa√ß√£o √∫nica
 */
export class ServiceInitializer {
  private static instance: ServiceInitializer;
  private servicesInitialized: boolean = false;
  
  // Refer√™ncias para os servi√ßos principais
  private cacheService: CacheService;
  private dataService: DataService;
  
  private constructor() {
    this.cacheService = CacheService.getInstance();
    this.dataService = new DataService(this.cacheService); // Inicializando dataService no construtor
  }
  
  /**
   * Obt√©m a inst√¢ncia √∫nica do inicializador de servi√ßos
   */
  public static getInstance(): ServiceInitializer {
    if (!ServiceInitializer.instance) {
      ServiceInitializer.instance = new ServiceInitializer();
    }
    return ServiceInitializer.instance;
  }
  
  /**
   * Inicializa todos os servi√ßos na ordem correta
   * Deve ser chamado antes de qualquer uso dos servi√ßos
   */
  public initialize(): void {
    if (this.servicesInitialized) {
      console.log('‚ÑπÔ∏è Servi√ßos j√° foram inicializados anteriormente.');
      return;
    }
    
    console.log('üöÄ Inicializando servi√ßos do FuriaBot...');
    
    try {
      // Etapa 1: Inicializar os servi√ßos b√°sicos
      this.initializeBasicServices();
      
      // Etapa 2: Configurar servi√ßos dependentes
      this.configureDependentServices();
      
      // Etapa 3: Aplicar configura√ß√µes customizadas do arquivo config.ts
      this.applyCustomConfigurations();
      
      this.servicesInitialized = true;
      console.log('‚úÖ Servi√ßos do FuriaBot inicializados com sucesso!');
    } catch (error) {
      console.error('‚ùå Erro ao inicializar servi√ßos:', error);
      throw new Error(`Falha na inicializa√ß√£o dos servi√ßos: ${error}`);
    }
  }
  
  /**
   * Inicializa os servi√ßos b√°sicos primeiros (sem depend√™ncias)
   */
  private initializeBasicServices(): void {
    // Etapa 1: CacheService j√° foi inicializado no construtor
    console.log('üì¶ CacheService inicializado (singleton)');
    
    // Etapa 2: DataService depende do CacheService
    console.log('üìä DataService inicializado');
  }
  
  /**
   * Configura servi√ßos que dependem de outros servi√ßos
   */
  private configureDependentServices(): void {
    // Injeta o CacheService no AIService
    aiService.setCacheService(this.cacheService);
    console.log('üß† CacheService injetado no AIService');
    
    // Injeta o DataService no AIService
    aiService.setDataProvider(this.dataService);
    console.log('üîÑ DataProvider injetado no AIService');
    
    // Inicializa o BotCore com o DataService
    botCore.initialize(this.dataService);
    console.log('ü§ñ BotCore inicializado com DataService');
  }
  
  /**
   * Aplica configura√ß√µes customizadas do arquivo config.ts
   */
  private applyCustomConfigurations(): void {
    // Atualiza as configura√ß√µes do AIService com os valores do CONFIG
    if (CONFIG.AI) {
      const aiConfig: AIServiceConfig = {
        provider: this.convertToAIProvider(CONFIG.AI.PROVIDER),
        apiKey: CONFIG.AI.API_KEY,
        endpoint: CONFIG.AI.ENDPOINT,
        model: CONFIG.AI.MODEL,
        contextMemorySize: CONFIG.AI.CONTEXT_MEMORY_SIZE,
        defaultTemperature: CONFIG.AI.DEFAULT_TEMPERATURE,
        maxTokens: CONFIG.AI.MAX_TOKENS,
        useCache: CONFIG.AI.USE_CACHE,
        cacheTTL: CONFIG.AI.CACHE_TTL
      };
      
      aiService.updateConfig(aiConfig);
      console.log(`‚öôÔ∏è AIService configurado: ${aiConfig.provider}, modelo ${aiConfig.model}`);
    }
  }
  
  /**
   * Converte o valor do enum AIProvider para o tipo correto
   */
  private convertToAIProvider(providerEnum: AIProvider): AIProvider {
    switch (providerEnum) {
      case AIProvider.OPENAI:
        return AIProvider.OPENAI;
      case AIProvider.HUGGINGFACE:
        return AIProvider.HUGGINGFACE;
      case AIProvider.GEMINI:
        return AIProvider.GEMINI;
      case AIProvider.OLLAMA:
        return AIProvider.OLLAMA;
      case AIProvider.MOCK:
        return AIProvider.MOCK;
      default:
        console.warn(`‚ö†Ô∏è Provedor de IA desconhecido: ${providerEnum}. Usando MOCK como fallback.`);
        return AIProvider.MOCK;
    }
  }
  
  /**
   * Retorna o servi√ßo de cache
   */
  public getCacheService(): CacheService {
    this.ensureInitialized();
    return this.cacheService;
  }
  
  /**
   * Retorna o servi√ßo de dados
   */
  public getDataService(): DataService {
    this.ensureInitialized();
    return this.dataService;
  }
  
  /**
   * Garante que os servi√ßos estejam inicializados
   */
  private ensureInitialized(): void {
    if (!this.servicesInitialized) {
      this.initialize();
    }
  }
}

/**
 * Fun√ß√£o de conveni√™ncia para acessar a inst√¢ncia do inicializador
 */
export function getServiceInitializer(): ServiceInitializer {
  return ServiceInitializer.getInstance();
}

/**
 * Fun√ß√£o de conveni√™ncia para garantir inicializa√ß√£o
 * Pode ser chamada m√∫ltiplas vezes sem problemas
 */
export function ensureServicesInitialized(): void {
  getServiceInitializer().initialize();
}

/**
 * Fun√ß√£o para inicializar servi√ßos explicitamente
 * Use esta fun√ß√£o para inicializar todos os servi√ßos no in√≠cio da aplica√ß√£o
 */
export function initializeServices(): void {
  ensureServicesInitialized();
}